                            | # address 0
                            | #
0x000:                      |     .pos 0
0x000: 30f40003000000000000 |     irmovq stack, %rsp
0x00a: 800001000000000000   |     call main
0x013: 00                   |     halt
                            | 
0x100:                      | .pos 0x100
0x100:                      | main:
                            |     # rdi now contains the array
0x100: 30f70002000000000000 |     irmovq $array, %rdi
0x10a: 30fe4800000000000000 |     irmovq $72, %r14
                            | 
                            |     # array starts at the last element
0x114: 60e7                 |     addq %r14, %rdi
                            | 
                            |     # X = 40
0x116: 30f62800000000000000 |     irmovq $40, %rsi
                            | 
                            |     # S = 0
0x120: 30f80000000000000000 |     irmovq $0, %r8
                            | 
                            |     # Limit = 3000
0x12a: 30f2b80b000000000000 |     irmovq $3000, %rdx
                            | 
                            |     # i = size - 1
0x134: 30f10900000000000000 |     irmovq $9, %rcx
                            | 
                            |     # amt to increment array by 
0x13e: 30fe0800000000000000 |     irmovq $8, %r14
0x148:                      | loop:
                            |     # check if i < 0
0x148: 201b                 |     rrmovq %rcx, %r11
0x14a: f2bfb801000000000000 |     tjlt %r11, done
                            | 
                            |     # load A[i] into %rbx
0x154: 50370000000000000000 |     mrmovq (%rdi), %rbx
                            | 
                            |     # i--
0x15e: 61e7                 |     subq %r14, %rdi
0x160: 30f00100000000000000 |     irmovq $1, %rax
0x16a: 6101                 |     subq %rax, %rcx
                            | 
                            |     # if (A[i] < 0)
0x16c: 203b                 |     rrmovq %rbx, %r11
                            | 
                            |     # jump if negative
0x16e: f2bf8701000000000000 |     tjlt %r11, neg_case
                            | 
0x178:                      | pos_case:
                            |     # Y = X >> A[i]
                            | 
                            |     # x moves into y
0x178: 2069                 |     rrmovq %rsi, %r9
                            | 
                            |     # shift amt (A[i])
0x17a: 203a                 |     rrmovq %rbx, %r10
                            | 
                            |     # Y = X >> A[i]
0x17c: 66a9                 |     shaq %r10, %r9
0x17e: 709901000000000000   |     jmp compute_mod 
                            | 
0x187:                      | neg_case:
                            |     # Y = X << (-A[i])
                            | 
                            |     # x moves into y
0x187: 2069                 |     rrmovq %rsi, %r9
                            | 
                            |     # shift amt (A[i])
0x189: 203a                 |     rrmovq %rbx, %r10
                            | 
0x18b: 30fb0000000000000000 |     irmovq $0, %r11
                            | 
                            |     # r11 = -A[i]
0x195: 61ab                 |     subq %r10, %r11
                            | 
                            |     # Y = X << (-A[i])
0x197: 66b9                 |     shaq %r11, %r9
                            | 
0x199:                      | compute_mod:
0x199: 209c                 |     rrmovq %r9, %r12
0x19b: 672c                 |     divq %rdx, %r12
0x19d: 642c                 |     mulq %rdx, %r12
0x19f: 61c9                 |     subq %r12, %r9
                            |     
0x1a1: f59fad01000000000000 |     tjge %r9, no_adjust
0x1ab: 6029                 |     addq %rdx, %r9
0x1ad:                      | no_adjust:
                            |     
0x1ad: 6098                 |     addq %r9, %r8          # S += remainder
                            | 
0x1af: 704801000000000000   |     jmp loop
                            | 
0x1b8:                      | done:
0x1b8: 90                   |     ret
                            | 
                            | 
                            | #int A[size]
0x200:                      |     .pos 0x200
0x200:                      |     .align 8
0x200: fcffffffffffffff     | array: .quad -4
0x208: f3ffffffffffffff     |     .quad -13
0x210: 0300000000000000     |     .quad 3
0x218: 0100000000000000     |     .quad 1
0x220: feffffffffffffff     |     .quad -2
0x228: fbffffffffffffff     |     .quad -5
0x230: ffffffffffffffff     |     .quad -1
0x238: 0000000000000000     |     .quad 0
0x240: f9ffffffffffffff     |     .quad -7
0x248: 0300000000000000     |     .quad 3 
                            | 
0x300:                      | 	.pos 0x300
0x300:                      | stack:
